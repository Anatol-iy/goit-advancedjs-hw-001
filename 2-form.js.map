{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["// Ключ для хранения данных формы в локальном хранилище\nconst STORAGE_KEY = 'feedback-form-state';\n\n// Объект для хранения данных формы\nconst formData = {\n  email: '', // Поле для хранения значения email\n  message: '', // Поле для хранения значения сообщения\n};\n\n// Получаем элемент формы по классу 'feedback-form'\nconst form = document.querySelector('.feedback-form');\n\n// Добавляем обработчик события на отправку формы\nform.addEventListener('submit', onFormSubmit);\n\n// Добавляем обработчик события на ввод данных в поля формы\nform.addEventListener('input', onFormInput);\n\n// Загружаем данные формы из локального хранилища\nloadFormData();\n\n// Функция обработки ввода данных в поля формы\nfunction onFormInput({ target }) {\n  // Сохраняем введенные данные в объект formData, удаляя пробелы по краям\n  formData[target.name] = target.value.trim();\n\n  try {\n    // Сохраняем объект formData в локальное хранилище\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));\n  } catch (error) {\n    // Если возникает ошибка, выводим ее имя в консоль\n    console.log(error.name);\n  }\n}\n\n// Функция обработки отправки формы\nfunction onFormSubmit(event) {\n  // Отменяем стандартное поведение формы (перезагрузку страницы)\n  event.preventDefault();\n\n  // Получаем значения полей формы, удаляя пробелы по краям\n  const email = form.elements.email.value.trim();\n  const message = form.elements.message.value.trim();\n\n  // Проверяем, заполнены ли оба поля\n  if (email === '' || message === '') {\n    // Если не заполнены, показываем предупреждение\n    alert('Please fill in all the fields!');\n    return; // Завершаем выполнение функции\n  }\n\n  // Если поля заполнены, сохраняем их значения в объект formData\n  formData.email = email;\n  formData.message = message;\n\n  // Сбрасываем форму\n  event.currentTarget.reset();\n\n  // Очищаем данные в локальном хранилище\n  localStorage.removeItem(STORAGE_KEY);\n\n  // Сбрасываем значения в объекте formData\n  formData.email = '';\n  formData.message = '';\n}\n\n// Функция загрузки данных формы из локального хранилища\nfunction loadFormData() {\n  try {\n    // Получаем данные из локального хранилища и парсим их в объект\n    const formData = JSON.parse(localStorage.getItem(STORAGE_KEY));\n\n    // Если данные существуют, заполняем поля формы\n    if (formData) {\n      for (const [name, value] of Object.entries(formData)) {\n        form.elements[name].value = value; // Заполняем соответствующее поле формы\n      }\n    }\n  } catch (error) {\n    // Если возникает ошибка, выводим ее имя в консоль\n    console.log(error.name);\n    return; // Завершаем выполнение функции\n  }\n}\n"],"names":["STORAGE_KEY","formData","form","onFormSubmit","onFormInput","loadFormData","target","error","event","email","message","name","value"],"mappings":"wFACA,MAAMA,EAAc,sBAGdC,EAAW,CACf,MAAO,GACP,QAAS,EACX,EAGMC,EAAO,SAAS,cAAc,gBAAgB,EAGpDA,EAAK,iBAAiB,SAAUC,CAAY,EAG5CD,EAAK,iBAAiB,QAASE,CAAW,EAG1CC,IAGA,SAASD,EAAY,CAAE,OAAAE,GAAU,CAE/BL,EAASK,EAAO,IAAI,EAAIA,EAAO,MAAM,OAErC,GAAI,CAEF,aAAa,QAAQN,EAAa,KAAK,UAAUC,CAAQ,CAAC,CAC3D,OAAQM,EAAO,CAEd,QAAQ,IAAIA,EAAM,IAAI,CACvB,CACH,CAGA,SAASJ,EAAaK,EAAO,CAE3BA,EAAM,eAAc,EAGpB,MAAMC,EAAQP,EAAK,SAAS,MAAM,MAAM,OAClCQ,EAAUR,EAAK,SAAS,QAAQ,MAAM,OAG5C,GAAIO,IAAU,IAAMC,IAAY,GAAI,CAElC,MAAM,gCAAgC,EACtC,MACD,CAGDT,EAAS,MAAQQ,EACjBR,EAAS,QAAUS,EAGnBF,EAAM,cAAc,QAGpB,aAAa,WAAWR,CAAW,EAGnCC,EAAS,MAAQ,GACjBA,EAAS,QAAU,EACrB,CAGA,SAASI,GAAe,CACtB,GAAI,CAEF,MAAMJ,EAAW,KAAK,MAAM,aAAa,QAAQD,CAAW,CAAC,EAG7D,GAAIC,EACF,SAAW,CAACU,EAAMC,CAAK,IAAK,OAAO,QAAQX,CAAQ,EACjDC,EAAK,SAASS,CAAI,EAAE,MAAQC,CAGjC,OAAQL,EAAO,CAEd,QAAQ,IAAIA,EAAM,IAAI,EACtB,MACD,CACH"}